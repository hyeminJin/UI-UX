		<!-- log4jdbc-remix 를 이용한 쿼리로그 출력 -->
		<dependency>
	        <groupId>org.lazyluke</groupId>
	        <artifactId>log4jdbc-remix</artifactId>
	        <version>0.2.7</version>
		</dependency>
============================================
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
		<property name="driverClassName" value="core.log.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:XE" />
		<property name="username" value="scott" />
		<property name="password" value="tiger" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:/sqlmap/*.xml" />
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>	
	
	<!-- 	3번과 4번 방식을 사용하기 위한 방식임  -->
	<!-- 	Mapper Interface -->
	<mybatis-spring:scan base-package="edu.bit.ex.*"/> 
		
</beans>


=========================
<repositories>
		<repository>
	    	<id>oracle</id>
	    	<url>http://www.datanucleus.org/downloads/maven2/</url>
		</repository>
	</repositories>	
	
	<dependencies>
		
		<!-- 오라클 JDBC 드라이버 -->
		<dependency>
		    <groupId>oracle</groupId>
		    <artifactId>ojdbc6</artifactId>
		    <version>11.2.0.3</version>
		</dependency>
		
		<!-- 스프링에서 JDBC 를 사용하기 위한 라이브러리 입니다. -->
		<dependency>
		   <groupId>org.springframework</groupId>
		   <artifactId>spring-jdbc</artifactId>
		   <version>${org.springframework-version}</version>
		</dependency>
		
		<!-- 커넥션 풀을 위한 라이브러리 -->
		<dependency>
		    <groupId>commons-dbcp</groupId>
		    <artifactId>commons-dbcp</artifactId>
		    <version>1.4</version>
		</dependency>
		
		<!-- MyBatis 라이브러리 -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis</artifactId>
		    <version>3.4.1</version>
		</dependency>
		
		<!-- 마이바티스와 스프링 연동을 위한 라이브러리 -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis-spring</artifactId>
		    <version>1.3.0</version>
		</dependency>
=============================================================
영화 예매 사이트는 회원제로 관리되고 있으나 비회원인 경우에도 예매가 가
능하다. 회원 가입을 위해서는 이름, 주민번호, 전화번호, 이메일, 회원 아이
디, 비밀번호와 같은 기본적인 정보를 입력해야 한다. 여러 지점에 있는 극장
에 대해서 영화를 예매할 수 있다. 예매가 순조롭게 이루어지려면 각 극장지
점명과 위치가 관리되어야 한다. 극장은 여러 개의 상영관이 있으며 각각의 
상영관에서는 여러 종류의 영화가 상영된다. 영화표에는 해당 상영관의 좌석
이 정해져서 기록되어 있다. 영화표를 예매할 때 고객들은 원하는 좌석을 지
정할 수 있으며 예매일자와 예매 수량이 기록된다. 결재방법은 카드결재나 계
좌이체 방법이 있다. 영화표를 예매할 때 회원의 경우에 한해서 포인트 점수
가 적립된다. 예매한 영화표는 취소가 가능하고 취소한 경우에 환불을 해준
다. 취소 방법은 부분 취소와 전체 취소 두 가지 방법이 있다. 
=============================================================================================================
<repositories>
		<repository>
	    	<id>oracle</id>
	    	<url>http://www.datanucleus.org/downloads/maven2/</url>
		</repository>
	</repositories>
	
	
	<!-- 오라클 JDBC 드라이버 -->
		<dependency>
		    <groupId>oracle</groupId>
		    <artifactId>ojdbc6</artifactId>
		    <version>11.2.0.3</version>
		</dependency>
===================================================================
엠블랙 슈퍼에서는 고객을 관리하기 위해서 고객명, 주소 및 주민번호를 기록
한 명단을 보유하고 있다. 물품관리를 위해서 각 물품마다 물품명, 단가, 수량 
및 각 물품에 고유한 물품번호를 기록한다. 어느 한 물품을 여러 고객들이 구입 
가능하고 어느 한 고객이 여러 물품들을 구입하는 것이 가능하다. 고객이 물품
을 구입할 때마다 날짜와 구입수량 및 총 구입가격을 기록한다. 물품들은 제조
회사에서 제조되므로 제조회사들에 대한 데이터도 관리하며, 각 제조회사마다 
제조회사명, 주소, 전화번호 및 각 제조회사에 고유한 제조회사번호를 기록한
다. 어느 한 제조회사는 여러 물품들을 만들며, 어느 한 물품은 한 회사에서만 
제조된다. 물품이 제조될 때마다 날짜와 수량을 기록한다. 
================================================================

http://exerd.com/update
 ============================================================================
 어느 회사에서 프로젝트 배정 현황에 관한 데이터베이스를 구축하고자 한다. 
엔티티 정의서와 엔티티 관계도(E-R 모델)와 관계 스키마와 테이블 명세서를 작성하시오
==============================
사원은 하나 또는 그 이상의 프로젝트에 배정될 수 있으며, 프로젝트에 배정되지 않은 사원도 있다. 
하지만 각 프로젝트에 직원은 한 명 이상 반드시 배정되어야 한다. 
직원은 이름, 호봉, 특기, 생년월일을 속성으로 가지며, 프로젝트는 프로젝트 번호, 프로젝트 내역, 시작일, 
예상 완료일에 대한 정보가 기록되어야 한다. 
단, 정보 기록 시 직원은 하나 이상의 특기를 기록할 수 있다. 	
	===========================
	<filter> 
	    <filter-name>encodingFilter</filter-name> 
	    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class> 
	    <init-param> 
	       <param-name>encoding</param-name> 
	       <param-value>UTF-8</param-value> 
	    </init-param> 
	    <init-param> 
	       <param-name>forceEncoding</param-name> 
	       <param-value>true</param-value> 
	    </init-param> 
	 </filter> 
	 <filter-mapping> 
	    <filter-name>encodingFilter</filter-name> 
	    <url-pattern>/*</url-pattern> 
	 </filter-mapping>   
  =============================
  
  <!DOCTYPE html>
<html>

	<head>
		<title>JavaScript</title>
		
		<script src="js/jquery-3.2.1.min.js"></script>
		
		<script>
			
			$(document).ready(function(){
				
				//each()	배열
				$("p").each(function(index, item){
					console.log($(item).text());
					console.log(index);				//item == this
					if(index % 2 == 0) {
						$(item).css("background", "#dfdfdf");
						//$(this).css("background", "#dfdfdf");	//item == this
					} else {
						$(item).css("background", "#cccccc");
						//$(this).css("background", "#cccccc");	//item == this
					}
				});
				
				
				//html() / text()
				console.log("htmlMethod : " + $("#htmlMethod").html());
				$("#htmlMethod").html("<strong>new</strong> " + $("#textMethod").html());
				
				console.log("textMethod : " + $("#textMethod").text());
				$("#textMethod").text("new " + $("#textMethod").text());
				
						
				//addClsss() 클래스 속성 추가
				//removeClsss() 클래스 속성 제거
				$("#addClass").addClass("addCla");				
				$(".addCla").css("background", "#ff0000");
				
				/* <div id="removeClass" class="remCla"> removeClass() 메서드 </div> */
				$(".remCla").css("background", "#00ff00");
				//$("#removeClass").removeClass("remCla");
				//$(".remCla").removeClass("remCla");
				$(".remCla").css("background", "#0000ff");
				
				
				//attr()  속성 추가
				//attr()  속성 검사 (2개이상인 경우 첫번째 객체 이용)
				//removeAttr(속성)  속성 제거
				$("#attrMethod img").attr("src", "img/logo.png");
				console.log("#attrMethod img src : " + $("#attrMethod img").attr("src"));
				
				$("#attrMethod img").removeAttr("src");
				console.log("#attrMethod img src : " + $("#attrMethod img").attr("src")); 
				
				
				//css()	스타일 추가
				//css()	스타일 검사
				$("#cssMethod").css("width", "300px").css("height", "100px");
				$("#cssMethod").css("background", "#ff0000");
				
				console.log("cssMethod css width : " + $("#cssMethod").css("width"));
				console.log("cssMethod css height : " + $("#cssMethod").css("height"));
				console.log("cssMethod css background : " + $("#cssMethod").css("background"));
				
				
				//remove()	// 문서 객체 제거
				//empty()	// 문서 객체 내부 제거
				$("#removeMthod").remove();
				$("#emptyMthod").empty();
			});
			
		</script>
	</head>
	
	<body>
		
		<p> Hello javascript! </p>
		<p> Hello jQuery! </p>
		<p> Hello node.js! </p>
		
		<div id="htmlMethod"> html() 메서드 </div>
		<div id="textMethod"> text() 메서드 </div>
		
		<div id="addClass"> addClass() 메서드 </div>
		<div id="removeClass" class="remCla"> removeClass() 메서드 </div>
		
		<div id="attrMethod">
			<img>
			<br>
			<img>
		</div>
		
		<div id="cssMethod"> CSS METHOD </div>
		
		<div id="removeMthod"> Remove Object! </div>
		<div id="emptyMthod"> Empty Object! </div>
		
	</body>

</html>
  
  =================================
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
==================================================
https://iotcenter.seoul.go.kr/612?category=663840
================================================
<body>
    <div class="container">
        <header>
            <h1>flex_holy</h1>
        </header>
        <section class="content">
            <nav>
                <ul>
                    <li>html</li>
                    <li>css</li>
                    <li>javascript</li>
                </ul>
            </nav>
            <main>
                Lorem ipsum dolor sit amet, consectetur adipisicing elit. Reiciendis veniam totam labore ipsum, nesciunt temporibus repudiandae facilis earum, sunt autem illum quam dolore, quae optio nemo vero quidem animi tempore aliquam voluptas assumenda ipsa voluptates. Illum facere dolor eos, corporis nobis, accusamus velit, similique cum iste unde vero harum voluptatem molestias excepturi. Laborum beatae, aliquid aliquam excepturi pariatur soluta asperiores laudantium iste, architecto ducimus fugiat sed, saepe quaerat recusandae exercitationem sapiente, impedit nostrum error. Doloremque impedit, eos in quos assumenda illo eum dicta. Voluptatum quaerat excepturi consectetur, doloremque esse deleniti commodi natus, maxime sit? Officia rerum quibusdam porro dolorum numquam harum soluta ex quo! Vero, nam? Necessitatibus rem hic perferendis maiores obcaecati voluptate sunt autem id doloribus, similique repudiandae nesciunt vel facere ex accusantium ipsum provident iste itaque? Perferendis culpa nostrum repellendus dolores repudiandae assumenda, tempora laudantium in quibusdam placeat facilis ex voluptatem provident velit iusto fuga eum nobis deserunt enim minus. Explicabo vel labore, eum doloremque, impedit recusandae aut illum corporis quis atque sit vero quasi tempore placeat ipsam similique quo delectus provident animi distinctio debitis eligendi voluptatum! Dolorem perspiciatis similique non fugit eaque? Commodi suscipit earum aliquam rem, neque ad. Obcaecati nisi beatae officia inventore laborum nostrum natus perspiciatis iste, aperiam vero quisquam saepe labore facilis veritatis illo excepturi vitae autem quis! Voluptatibus atque doloribus perferendis, eligendi ex aliquid debitis laudantium omnis accusamus similique cum mollitia quos adipisci reprehenderit assumenda sequi, dolore tenetur ipsam, odio, vero reiciendis iure. Dolore itaque nesciunt ipsam, id maxime saepe officiis dolorum molestias earum temporibus? Possimus ipsum accusamus quasi minima, quod magnam iusto non cupiditate facilis pariatur aliquam omnis, blanditiis assumenda magni ad voluptas dicta est optio reprehenderit rem ratione earum ipsa, dolor vero! Totam, adipisci eos nihil repellendus. Maiores, blanditiis. Officiis aspernatur iure culpa illo sint ex id perferendis, explicabo architecto ipsa voluptatibus nesciunt pariatur commodi cum quam. Obcaecati ut quidem quam error nemo. Pariatur aliquid autem inventore laboriosam, velit totam, temporibus ad magnam minus, quis nesciunt aperiam veritatis. Vitae porro provident magni eos sit sed dignissimos iure natus odio nostrum molestiae atque mollitia saepe adipisci ut velit quo hic fuga ex, voluptates vel eum ipsum amet, sunt corporis. Maxime odit alias, ratione tenetur, asperiores consequuntur deserunt modi velit ab maiores pariatur voluptates beatae aut nesciunt perspiciatis sed veritatis doloremque quibusdam amet vero. Qui, labore. Atque ratione quae ducimus reprehenderit perferendis nisi earum, debitis commodi maxime sequi facere optio doloribus, repudiandae ex quidem amet iusto inventore quaerat at praesentium sint. Omnis mollitia esse illum suscipit, quis dolorem maxime sunt eaque, autem nisi corrupti perferendis provident tempore quas, unde! Doloribus, at, accusamus, maiores enim amet quod provident temporibus atque, ipsam fugiat incidunt. Quasi iusto ea quibusdam eveniet porro officiis dicta fugiat fugit laudantium ipsum esse quisquam quo laboriosam odit voluptates alias veritatis expedita quidem consectetur eos, impedit, incidunt dolorum? Laborum, facere nulla ullam, aliquid rerum nihil non adipisci, architecto obcaecati iure quam, fuga minus alias eligendi provident ex odio sit. Ducimus, facilis veritatis numquam, maxime quos natus animi, a magnam itaque veniam pariatur sed alias eos quas? Voluptatum fugit doloribus fugiat iste adipisci quidem odit consectetur, sapiente culpa magnam laborum, laboriosam exercitationem cupiditate dignissimos, nisi doloremque hic itaque aspernatur. Ab labore dolorum cumque rem vitae repellat quo quae porro cupiditate minus. Perspiciatis cumque sequi provident fugit. Nulla reiciendis voluptates molestiae corporis voluptate, quidem consequuntur, dolor vero necessitatibus deleniti tempora ab facilis similique, ea error deserunt fuga quia atque omnis nam earum non, illo. Minima quos optio nostrum eos aperiam? Quam, obcaecati velit deserunt tempore, iure vitae repudiandae quos illum quasi esse quas quaerat at consectetur necessitatibus. Cum, quod, dolore voluptatibus quibusdam accusamus aliquam consequatur dolorum illo! Sequi commodi adipisci explicabo soluta necessitatibus magni expedita cumque, officiis voluptas, vel amet recusandae sunt, quidem eum aliquid deleniti unde, impedit non magnam consectetur est minima facere architecto. Molestias cum vero nostrum saepe, dignissimos eius beatae natus fugiat deserunt esse, nesciunt eos ducimus id amet magnam possimus? Optio adipisci quisquam earum totam nemo sunt provident iure ab consectetur et deleniti molestiae blanditiis laudantium, autem consequatur rerum labore ipsa ipsam deserunt nisi, expedita doloremque quibusdam! Illo nemo laborum a sequi in, ad ipsum blanditiis alias! Eaque eos eligendi hic dolorum sint, tempore voluptatum ut numquam. Corporis similique itaque accusantium, esse porro ea dolor, quae consequuntur ullam necessitatibus magni rem optio officiis totam in dicta quas, odio quam blanditiis dolores pariatur? Dolorem, fuga? Harum ratione nemo perspiciatis culpa eum repudiandae esse, atque impedit nihil debitis, assumenda est. Sapiente rerum alias ipsa tempore obcaecati deserunt maiores distinctio officiis itaque fugit optio, eveniet facere amet ipsum, harum laboriosam eius, enim magni blanditiis temporibus nobis consequuntur ut. Quia magnam vero atque modi aspernatur in perferendis voluptas reprehenderit, rerum dolore unde iusto ab non eius molestiae quasi tenetur beatae ipsam quidem, quos at architecto voluptate alias eos. Deserunt velit beatae, ullam, accusantium sit asperiores! A vero perferendis, harum praesentium dolorem deserunt. Numquam voluptas necessitatibus, aliquam ullam saepe harum amet consequatur minima neque officia maxime quo beatae ab aliquid ex placeat rerum unde, reiciendis aspernatur similique, doloremque ad laboriosam modi. Minus quam aperiam, sed aliquid. Fugiat amet harum consequuntur reprehenderit id eum ratione quos temporibus, quae. Ab ut omnis tempora voluptates, sed ea animi voluptatem pariatur quod mollitia corrupti voluptas repellendus consequatur quae adipisci, enim vitae harum nulla natus iusto hic totam officia architecto quam. Debitis dignissimos praesentium, hic. Ad assumenda, aliquid consequuntur dolore eum repudiandae ab explicabo ipsa sed blanditiis. Quidem unde necessitatibus facilis, quis commodi. Dignissimos perferendis, nihil labore corrupti autem cumque ipsum vel voluptatum? Nostrum labore, omnis provident ullam repellendus culpa amet rem consequatur animi, necessitatibus porro. In consequatur optio recusandae, quisquam accusantium at deserunt voluptatem fugit quibusdam neque libero assumenda consectetur numquam ratione quaerat. Quos omnis neque atque, id perferendis possimus, alias, dignissimos doloribus ducimus similique ratione vitae eos laudantium, tempore cupiditate quod consectetur! Voluptas enim laboriosam nesciunt rem. Recusandae beatae numquam asperiores adipisci neque, vel pariatur suscipit provident, a est magni. Laborum dolore incidunt saepe ipsam? Eveniet doloremque animi maxime aliquid rem fugit dolor dignissimos! Quo, ut quod ab.
            </main>
            <aside>
                AD
            </aside>
        </section>
        <footer>
            <a href="https://www.naver.com">네이버</a>
        </footer>
    </div>
</body>
========================================================================
<%@ page language="java" contentType="text/html; charset=EUC-KR"
    pageEncoding="EUC-KR"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=EUC-KR">
<title>Insert title here</title>
</head>
<body>
	
	<table width="500" cellpadding="0" cellspacing="0" border="1">
		<tr>
			<td>번호</td>
			<td>이름</td>
			<td>제목</td>
			<td>날짜</td>
			<td>히트</td>
		</tr>
		<c:forEach items="${list}" var="dto">
		<tr>
			<td>${dto.bId}</td>
			<td>${dto.bName}</td>
			<td>
				<c:forEach begin="1" end="${dto.bIndent}">-</c:forEach>
				<a href="content_view.do?bId=${dto.bId}">${dto.bTitle}</a></td>
			<td>${dto.bDate}</td>
			<td>${dto.bHit}</td>
		</tr>
		</c:forEach>
		<tr>
			<td colspan="5"> <a href="write_view.do">글작성</a> </td>
		</tr>
	</table>
	
</body>
</html>
===================
String query = "insert into mvc_board (bId, bName, bTitle, bContent, bHit, bGroup, bStep, bIndent) values (mvc_board_seq.nextval, ?, ?, ?, 0, mvc_board_seq.currval, 0, 0 )";
====================================================================	
	<table width="500" cellpadding="0" cellspacing="0" border="1">
		<form action="write.do" method="post">
			<tr>
				<td> 이름 </td>
				<td> <input type="text" name="bName" size = "50"> </td>
			</tr>
			<tr>
				<td> 제목 </td>
				<td> <input type="text" name="bTitle" size = "50"> </td>
			</tr>
			<tr>
				<td> 내용 </td>
				<td> <textarea name="bContent" rows="10" ></textarea> </td>
			</tr>
			<tr >
				<td colspan="2"> <input type="submit" value="입력"> &nbsp;&nbsp; <a href="list.do">목록보기</a></td>
			</tr>
		</form>
	</table>     
     =========================================================================================
     <div>
        <p>HTML5, CSS3 Document</p>
        <p>To. all member</p>
        <p>html5, CSS3 study is very easy html5, CSS3 study is very easy html5, CSS3 study is very easy</p>
        <p>From. SBA</p>
        <hr />
        <p><a href="http://sba.seoul.kr" target="_blank">서울산업진흥원</a></p>
    </div>
    =================================================================
    <Resource auth="Container" driverClassName="oracle.jdbc.OracleDriver" maxIdle="10" maxTotal="20" maxWaitMillis="-1" name="jdbc/oracle" password="tiger" type="javax.sql.DataSource" url="jdbc:oracle:thin:@127.0.0.1:1521:xe" username="scott"/>
   
   <!--
    auth : 컨테이너를 자원 관리자로 기술
    name : JDBC이름, 변경 가능
    driverClassName : JDBC 드라이버
    type : 웹에서 이 리소스를 사용할 때 DataSource로 리턴됨
    username : 접속계정
    password : 접속할 계정 비밀번호
    
    loginTimeout : 연결 끊어지는 시간
    maxActive : 최대 연결 가능한 Connection수 (기본 20개)
    maxIdle : Connection pool 유지를 위해 최대 대기 connection 숫자
    maxWait : 사용 가능한 커넥션이 없을 때 커넥션 회수를 기다리는 시간 (1000 = 1초)
    testOnBorrow : db에 test를 해볼 것인지
-->

==========================
private void actionDo(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		request.setCharacterEncoding("EUC-KR");
		
		name = request.getParameter("name");
		id = request.getParameter("id");
		pw = request.getParameter("pw");
		phone1 = request.getParameter("phone1");
		phone2 = request.getParameter("phone2");
		phone3 = request.getParameter("phone3");
		gender = request.getParameter("gender");
		
		String query = "insert into member values('" + name + "', '" + id + "', '" + pw + "', '" + phone1 + "', '" + phone2 + "', '"+ phone3 + "', '" + gender + "')";
		
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe" , "scott" , "tiger");
			stmt = connection.createStatement();
			int i = stmt.executeUpdate(query);
			if(i == 1){
				System.out.println("insert success");
				response.sendRedirect("joinResult.jsp");
			} else {
				System.out.println("insert fail");
				response.sendRedirect("join.html");
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if(stmt != null) stmt.close();
				if(connection != null) connection.close();
			} catch (Exception e) {}
		}
		
	}

======================================================================================================
<form action="JoinOk" method="post">
		이름 : <input type="text" name="name" size="10"><br />
		아이디 : <input type="text" name="id" size="10"><br />
		비밀번호 : <input type="text" name="pw" size="10"><br />
		전화번호 : <select name="phone1">
			<option value="010">010</option>
			<option value="016">016</option>
			<option value="017">017</option>
			<option value="018">018</option>
			<option value="019">019</option>
			<option value="011">011</option>
		</select> -		
		<input type="text" name="phone2" size="5"> - <input type="text" name="phone3" size="5"> <br />
		성별구분 : <input type="radio" name="gender" value="man">남 &nbsp;<input type="radio" name="gender" value="woman">여 <br />
		<input type="submit" value="회원가입"> <input type="reset" value="취소">
		
	</form>
=========================================================================================================
try{
				
				Class.forName(driver);	//oracle.jdbc.driver.OracleDriver
				connection = DriverManager.getConnection(url, uid, upw);	//jdbc:oracle:thin:@localhost:1521:xe
				statement = connection.createStatement();
				resultSet = statement.executeQuery(query);	//select * from member
				
				while(resultSet.next()){
					String name = resultSet.getString("ename");
					String job = resultSet.getString("job");
					String mgr = resultSet.getString("mgr");
										
					out.println("이름 : " + name + ", 직책 : " +job + ", 메니져 " + mgr + "<br />");
				}
				
			} catch(Exception e) {
			} finally {
				try{
					if(resultSet != null) resultSet.close();
					if(statement != null) statement.close();
					if(connection != null) connection.close();
				} catch(Exception e){}
			}

======================================================================
<!DOCTYPE html>

<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title></title>
</head>
<body>
    <header>
        <h1>MY HOMEPAGE</h1>
        <hr />
    </header>

    <nav>
        <ul>
            <li>HTML5</li>
            <li>CSS3</li>
            <li>JAVASCRIPT</li>
            <li>JQUERY</li>
        </ul>
        <hr />
    </nav>

    <section>
        <h1>What is HTML5?</h1>
        <p>HTML5 is goooooooooooooooooooooooooooooooooooooooooooooooooooooooood!</p>
        <hr />
    </section>

    <footer>
        <p>xxx주식회사 서울시 00구00동</p>
    </footer>
</body>
</html>
====================================
다음의 클래스 함수를 만드시오.
클래스 명은 MyMath 이며 아래의 두 함수를 static 으로 만드시오.

함수명: myMin
파라미터: int 배열
리턴값 배열의 값중 최소값

함수명: myMax
파라미터: int 배열
리턴값 배열의 값중 최소값

테스트 클래스 MyMathTest 를 만든후 int 배열 5개를 키보드 입력으로 받은후 myMin, myMax 함수 호출할것.
